set -g prefix M-Space
unbind-key C-b
# set -g prefix2 C-b  # enable if on a server
bind-key M-Space send-prefix
bind R source-file ~/.tmux.conf \; display-message "Config reloaded..."

## Quality of Life
set -g history-limit 50000
set -g allow-rename off
set -g set-titles on

# Window numbering always 1, 2, 3, ...
set -g renumber-windows on
set -g base-index 1
setw -g pane-base-index 1

## Join Windows
bind-key j command-prompt -p "join pane from:" "join-pane -s '%%'"
bind-key s command-prompt -p "send pane to:" "join-pane -t '%%'"

## - for vertical, \ for horizontal splits
# https://koenwoortman.com/tmux-remap-split-window-keys/
bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

set -g mode-keys vi
set -g status-keys emacs
set -g default-terminal "screen-256color"
if-shell "infocmp tmux-256color &>/dev/null" \
    "set -g default-terminal tmux-256color"
set -ga terminal-overrides ",*256col*:Tc"
set -s escape-time 300  # zero interferes with M-Space
setenv -gu SHLVL  # start shells at SHLVL=1

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Smart pane switching, ignoring vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
# and: https://github.com/dalejung/tmux-select-pane-no-wrap
# and: https://github.com/mrjones2014/smart-splits.nvim
# to add vim splits if desired
%hidden is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?((view|n?vim?x?)(diff)?|fzf)$'"
bind-key -n 'C-h' if-shell "$is_vim" { send-keys C-h } { if-shell -F '#{pane_at_left}'   {} { select-pane -L } }
bind-key -n 'C-j' if-shell "$is_vim" { send-keys C-j } { if-shell -F '#{pane_at_bottom}' {} { select-pane -D } }
bind-key -n 'C-k' if-shell "$is_vim" { send-keys C-k } { if-shell -F '#{pane_at_top}'    {} { select-pane -U } }
bind-key -n 'C-l' if-shell "$is_vim" { send-keys C-l } { if-shell -F '#{pane_at_right}'  {} { select-pane -R } }
bind-key -n 'M-h' if-shell "$is_vim" { send-keys M-h } { resize-pane -L 3 }
bind-key -n 'M-j' if-shell "$is_vim" { send-keys M-j } { resize-pane -D 3 }
bind-key -n 'M-k' if-shell "$is_vim" { send-keys M-k } { resize-pane -U 3 }
bind-key -n 'M-l' if-shell "$is_vim" { send-keys M-l } { resize-pane -R 3 }
bind-key -T copy-mode-vi 'C-h' if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind-key -T copy-mode-vi 'C-j' if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind-key -T copy-mode-vi 'C-k' if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind-key -T copy-mode-vi 'C-l' if-shell -F '#{pane_at_right}'  {} { select-pane -R }
bind-key -T prefix 'h' select-pane -L
bind-key -T prefix 'j' select-pane -D
bind-key -T prefix 'k' select-pane -U
bind-key -T prefix 'l' select-pane -R

### better mouse mode ###
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'tmux-plugins/tmux-yank'
set-option -g mouse on
set -g @scroll-without-changing-pane "on"
set -g @emulate-scroll-for-no-mouse-alternate-buffer "on"
# https://www.unixtutorial.org/tmux-mouse-mode-in-macos/
bind-key -n DoubleClick1Pane \
    if-shell "$is_vim" \
    {} \
    { \
        select-pane;
        copy-mode -eM;
        send-keys -X select-word
    }
bind-key -T copy-mode-vi DoubleClick1Pane \
    select-pane\; \
    send-keys -X select-word

# disable "release mouse drag to copy and exit copy-mode", ref: https://github.com/tmux/tmux/issues/140
unbind-key -T copy-mode-vi MouseDragEnd1Pane
set -g @yank_action 'copy-pipe'

# since MouseDragEnd1Pane neither exit copy-mode nor clear selection now,
# let single click do selection clearing for us.
bind-key -T copy-mode-vi MouseDown1Pane select-pane\; send-keys -X clear-selection

# this line changes the default binding of MouseDrag1Pane, the only difference
# is that we use `copy-mode -eM` instead of `copy-mode -M`, so that WheelDownPane
# can trigger copy-mode to exit when copy-mode is entered by MouseDrag1Pane
#bind -n MouseDrag1Pane if -Ft= '#{mouse_any_flag}' 'if -Ft= \"#{pane_in_mode}\" \"copy-mode -eM\" \"send-keys -M\"' 'copy-mode -eM'

# Dracula settings
set -g @plugin 'aaronkollasch/tmux-dracula'
set -g @dracula-show-powerline true
set -g @dracula-show-flags true
set -g @dracula-show-left-icon session
set -g @dracula-plugins "continuum cpu-usage ram-usage tmux-ram-usage attached-clients time"
set -g @dracula-military-time true
set -g @dracula-cpu-usage-label "C"
set -g @dracula-ram-usage-label "R"
set -g @dracula-tmux-ram-usage-label "T"
set -g @dracula-tmux-ram-usage-colors "light_purple dark_gray"
set -g @dracula-attached-clients-colors "pink dark_gray"
set -g @dracula-continuum-colors "dark_purple white"
set -g @dracula-continuum-mode "countdown"
set -g @dracula-clients-minimum 2
set -g @dracula-show-timezone false
set -g @dracula-show-empty-plugins false

# Resurrect/logging configuration
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-save-shell-history 'on'
set -g @continuum-restore 'on'
set -g @continuum-save-interval '15'
set -g @logging-path "$HOME/.tmux/logs"
set -g @screen-capture-path "$HOME/.tmux/logs"
set -g @save-complete-history-path "$HOME/.tmux/logs"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run -b '~/.tmux/plugins/tpm/tpm'

