local icons = nil
if not require("ak.opts").icons_enabled then
    icons = {
        breadcrumb = "»", -- symbol used in the command line area that shows your active key combo
        separator = "→", -- symbol used between a key and it's label
        group = "+", -- symbol prepended to a group
        ellipsis = "…",
        mappings = false,
        rules = false,
        keys = {
            Up = "↑ ",
            Down = "↓ ",
            Left = "← ",
            Right = "→ ",
            C = "C-",
            M = "M-",
            D = "Cmd-",
            S = "S-",
            CR = "CR",
            Esc = "ESC",
            ScrollWheelDown = "ScrollDown",
            ScrollWheelUp = "ScrollUp",
            NL = "NL",
            BS = "BS",
            Space = "SPC",
            Tab = "TAB",
            F1 = "F1",
            F2 = "F2",
            F3 = "F3",
            F4 = "F4",
            F5 = "F5",
            F6 = "F6",
            F7 = "F7",
            F8 = "F8",
            F9 = "F9",
            F10 = "F10",
            F11 = "F11",
            F12 = "F12",
        },
    }
end

return {
    "folke/which-key.nvim",
    event = "VeryLazy",
    config = function()
        vim.o.timeout = true
        vim.o.timeoutlen = 300
        local wk = require("which-key")
        wk.setup({
            icons = icons,
            replace = {
                key = {
                    function(key)
                        return require("which-key.view").format(key)
                    end,
                    { "<C-Bslash>", "<C-\\>" },
                },
            },
            spec = {
                { "(", desc = "Previous start of sentence" },
                { ")", desc = "Next start of sentence" },
                { "<M-b>", hidden = true },
                { "<M-f>", hidden = true },
                { "<S-Space>", hidden = true },
                { "<leader>b", group = "[B]uffer" },
                { "<leader>ba", desc = "[B]uffer [A]lternate" },
                { "<leader>bb", hidden = true },
                { "<leader>bd", desc = "[B]uffer [D]elete" },
                { "<leader>bf", hidden = true },
                { "<leader>bun", desc = "[B]uffer [UN]load" },
                { "<leader>bw", desc = "[B]uffer [W]ipe" },
                { "<leader>c", group = "[C]ode" },
                { "<leader>cg", group = "[C]hat [G]PT" },
                { "<leader>f", group = "[F]ind" },
                { "<leader>g", group = "[G]it" },
                { "<leader>h", group = "[H]unk" },
                { "<leader>i", group = "[I]nspect" },
                { "<leader>l", group = "[L]ocal" },
                { "<leader>m", group = "[M]essage" },
                { "<leader>t", group = "[T]erm" },
                { "<leader>w", group = "[W]orkspace" },
                { "Y", desc = "Yank (copy) to end of line" },
                { "Z", group = "Exit" },
                { "ZQ", desc = "Close window without checking for changes" },
                { "ZZ", desc = "Save and close current window" },
                { "g(", desc = "Previous start of sentence" },
                { "g)", desc = "Next start of sentence" },
                { "go", desc = "Open URI" },
                { "h", hidden = true },
                { "j", hidden = true },
                { "k", hidden = true },
                { "l", hidden = true },
                {
                    mode = { "n" },
                    { "q", desc = "Record macro" },
                    { "Q", desc = "Play macro" },
                    { "<C-q>", desc = "Toggle macro menu" },
                },
                {
                    mode = { "o" },
                    { "(", desc = "Start of previous sentence" },
                    { ")", desc = "Start of next sentence" },
                    { "a,", desc = "a parameter (with comma)" },
                    { "aC", desc = "a fenced code block (with delimiters)" },
                    { "aI", desc = "an indent (include above/below)" },
                    { "aS", desc = "a subword (with delimiters)" },
                    { "ac", desc = "a comment (with delimiters)" },
                    { "ae", desc = "entire buffer" },
                    { "ai", desc = "an indent (include line above)" },
                    { "ak", desc = "a key (with quotes)" },
                    { "al", desc = "a line (with leading spaces)" },
                    { "am", desc = "a chainMember (with dot)" },
                    { "au", desc = "a URI (with trailing spaces)" },
                    { "av", desc = "a value (with quotes)" },
                    { "i,", desc = "inner parameter" },
                    { "iC", desc = "a fenced code block" },
                    { "iI", desc = "inner indent" },
                    { "iS", desc = "inner subword" },
                    { "ic", desc = "inner comment" },
                    { "ie", desc = "entire buffer" },
                    { "ii", desc = "inner indent" },
                    { "ik", desc = "inner key" },
                    { "il", desc = "inner line" },
                    { "im", desc = "inner chainMember" },
                    { "iu", desc = "inner URI" },
                    { "iv", desc = "inner value" },
                },
            },
        })
    end,
}
