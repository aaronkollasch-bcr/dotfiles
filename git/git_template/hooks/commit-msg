#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
   sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
  echo >&2 Duplicate Signed-off-by lines.
  exit 1
}

# Check for maximum line lengths
# see https://gist.github.com/ordnungswidrig/b7f5413bec0b098f5838
# see https://gist.github.com/tueda/7633695
my_warned=false
head -1 "$1" | grep -qe '^..\{50\}' && {
  echo >&2 "WARNING: First line exceeds 50 char limit."
  my_warned=true
}
[ "$(wc -l < "$1")" -gt 1 ] && [ "$(head -2 "$1" | tail -1 | tr -d '[:space:]' | wc -c)" -gt 0 ] && {
  echo >&2 "WARNING: Second line must be empty."
  my_warned=true
}
sed -n '3,/# ------------------------ >8 ------------------------/p' "$1" | grep -v '^#' | grep -qe '^..\{72\}' && {
  echo >&2 "WARNING: Line exceeds 72 char limit."
  my_warned=true
}
if $my_warned; then
  echo '' >&2
  echo 'Use "git commit --amend" etc. to reedit the commit message.' >&2
  echo '' >&2
fi
