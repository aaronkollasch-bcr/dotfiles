#!/usr/bin/env bash

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

# # variables currently unused
# remote="$1"
# url="$2"

# Colors
RED='\033[0;31m'
NO_COLOR='\033[0m'

zero=$(git hash-object --stdin </dev/null | tr '0-9a-f' '0')

# shellcheck disable=SC2034
while read -r local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^[Ww][Ii][Pp]' "$range")
		if test -n "$commit"
		then
			echo >&2 "${RED}Error:${NO_COLOR} Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
		# Check for squash commit
		commit=$(git rev-list -n 1 --grep '^squash!' "$range")
		if test -n "$commit"
		then
			echo >&2 "${RED}Error:${NO_COLOR} Found squash! commit in $local_ref, not pushing"
			exit 1
		fi
		# Check for fixup commit
		commit=$(git rev-list -n 1 --grep '^fixup!' "$range")
		if test -n "$commit"
		then
			echo >&2 "${RED}Error:${NO_COLOR} Found fixup! commit in $local_ref, not pushing"
			exit 1
		fi
		# Check for FIXUP commit
		commit=$(git rev-list -n 1 --grep '^FIXUP' "$range")
		if test -n "$commit"
		then
			echo >&2 "${RED}Error:${NO_COLOR} Found FIXUP commit in $local_ref, not pushing"
			exit 1
		fi

		# check for gitleaks
		gitleaks git --verbose --redact --log-opts="--all $range"
		if [[ ${PIPESTATUS[0]} -gt 0 ]]; then
		    echo "${RED}Error:${NO_COLOR} gitleaks has detected sensitive information in your changes."
		    exit 1
		fi
	fi
done

exit 0
