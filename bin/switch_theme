#!/usr/bin/env python3
# bin/switch_theme

import os
import argparse


def change_theme(mode="dark"):
    # set bat theme
    with open(os.path.expanduser("~/.config/bat/config"), "r") as f:
        s = f.read()
    with open(os.path.expanduser("~/.config/bat/config"), "w") as f:
        if mode == "dark":
            s = s.replace("#DARK\n#-", "#DARK\n-")
            s = s.replace("#LIGHT\n-", "#LIGHT\n#-")
        else:
            s = s.replace("#LIGHT\n#-", "#LIGHT\n-")
            s = s.replace("#DARK\n-", "#DARK\n#-")
        f.write(s)

    # set fzf theme
    with open(os.path.expanduser("~/.config/fzf/fzfrc"), "r") as f:
        s = f.read()
    with open(os.path.expanduser("~/.config/fzf/fzfrc"), "w") as f:
        if mode == "dark":
            s = s.replace("--color=light", "--color=dark ")
        else:
            s = s.replace("--color=dark ", "--color=light")
        f.write(s)

    # set vivid LS_COLORS theme
    with open(os.path.expanduser("~/.config/vivid/theme"), "r") as f:
        s = f.read()
    with open(os.path.expanduser("~/.config/vivid/theme"), "w") as f:
        if mode == "dark":
            s = s.replace("#DARK\n# ", "#DARK\n ")
            s = s.replace("#LIGHT\n ", "#LIGHT\n# ")
        else:
            s = s.replace("#LIGHT\n# ", "#LIGHT\n ")
            s = s.replace("#DARK\n ", "#DARK\n# ")
        f.write(s)

    # set delta theme
    with open(os.path.expanduser("~/.gitconfig"), "r") as f:
        s = f.read()
    with open(os.path.expanduser("~/.gitconfig"), "w") as f:
        if mode == "dark":
            s = s.replace("#DARK\n#\t", "#DARK\n\t")
            s = s.replace("#LIGHT\n\t", "#LIGHT\n#\t")
        else:
            s = s.replace("#LIGHT\n#\t", "#LIGHT\n\t")
            s = s.replace("#DARK\n\t", "#DARK\n#\t")
        f.write(s)
    with open(os.path.expanduser("~/.config/git/config"), "r") as f:
        s = f.read()
    with open(os.path.expanduser("~/.config/git/config"), "w") as f:
        if mode == "dark":
            s = s.replace("#DARK\n#\t", "#DARK\n\t")
            s = s.replace("#LIGHT\n\t", "#LIGHT\n#\t")
        else:
            s = s.replace("#LIGHT\n#\t", "#LIGHT\n\t")
            s = s.replace("#DARK\n\t", "#DARK\n#\t")
        f.write(s)

    # set vim theme
    with open(os.path.expanduser("~/.vimrc"), "r") as f:
        s = f.read()
    with open(os.path.expanduser("~/.vimrc"), "w") as f:
        if mode == "dark":
            s = s.replace('"DARK\n" ', '"DARK\n ')
            s = s.replace('"LIGHT\n ', '"LIGHT\n" ')
        else:
            s = s.replace('"LIGHT\n" ', '"LIGHT\n ')
            s = s.replace('"DARK\n ', '"DARK\n" ')
        f.write(s)

    # set nvim theme
    with open(os.path.expanduser("~/.config/nvim/lua/ak/colors.lua"), "r") as f:
        s = f.read()
    with open(os.path.expanduser("~/.config/nvim/lua/ak/colors.lua"), "w") as f:
        if mode == "dark":
            s = s.replace('"DARK\n" ', '"DARK\n ')
            s = s.replace('"LIGHT\n ', '"LIGHT\n" ')
        else:
            s = s.replace('"LIGHT\n" ', '"LIGHT\n ')
            s = s.replace('"DARK\n ', '"DARK\n" ')
        f.write(s)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="switch_theme",
        description="Switch dark and light modes",
    )
    parser.add_argument("mode", choices=("dark", "light"))
    args = parser.parse_args()
    change_theme(args.mode)
